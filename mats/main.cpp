#include <iostream>
#include "opencv2/core/core.hpp"
#include "opencv2/opencv.hpp"
#include <opencv2/highgui/highgui.hpp>

#define trace(x)                 cerr << #x << ": " << x << endl;

using namespace std;
using namespace cv;

int main2(int argc, char *argv[])
{
    // freq is 5 Hz
    double data[] = {0.0, 0.5877852522924731, 0.9510565162951535, 0.9510565162951536, 0.5877852522924732, 1.2246467991473532e-16, -0.587785252292473, -0.9510565162951535, -0.9510565162951536, -0.5877852522924732, -2.4492935982947064e-16, 0.5877852522924729, 0.9510565162951534, 0.9510565162951536, 0.5877852522924734, 3.6739403974420594e-16, -0.5877852522924728, -0.9510565162951534, -0.9510565162951538, -0.5877852522924735, -4.898587196589413e-16, 0.5877852522924728, 0.9510565162951534, 0.9510565162951538, 0.5877852522924737, 6.123233995736766e-16, -0.5877852522924726, -0.9510565162951534, -0.9510565162951538, -0.5877852522924737, -7.347880794884119e-16, 0.5877852522924725, 0.9510565162951533, 0.9510565162951539, 0.5877852522924738, -2.6954609193973537e-15, -0.5877852522924724, -0.9510565162951533, -0.9510565162951539, -0.5877852522924739, -9.797174393178826e-16, 0.5877852522924751, 0.9510565162951532, 0.9510565162951539, 0.587785252292474, 1.102182119232618e-15, -0.5877852522924722, -0.9510565162951543, -0.951056516295154, -0.5877852522924741};


    std::vector<double> interpolated (data, data + sizeof(data) / sizeof(double));
    std::vector<double> fft;
    cv::Mat fft2;
    cv::Mat intp(interpolated);

    cv::dft(interpolated, fft);
    cv::dft(intp, fft2);

    float n = interpolated.size() ;
    float fs = 50 ;


    cout << fft.size() << " **\n";
    cout << interpolated.size() << " **\n";
    cout << fft2 ;
    cv::Mat planes[2];

    cout << fft[9] << " " << fft[10] << " " ;

    // for (std::vector<double>::const_iterator it = fft.begin(); it != fft.end(); ++it) {
    //     std::cout << *it << "\n";
    // }
    std::cout << std::endl;
    return 0;
}


float getDominantFreqs(Mat &timeSeries, float low, float high, int Fs){

    cv::Mat fft;

    int n = timeSeries.cols ;

    cv::dft(timeSeries, fft, DFT_ROWS);

    int low_ind = (low * n ) / Fs ;
    int high_ind = ( high * n ) / Fs ;
    
    float amp ,x,y, curMax = 0, freqMax;

    for(int j=0; j < timeSeries.rows; j++){

      for(int i=low_ind-1; i< high_ind+1; i++){
        x = fft.at<double>(j , 2*i - 1);
        y = fft.at<double>(j , 2*i);
        amp = x*x + y*y ;

        if(amp > curMax){
          curMax = amp;
          freqMax =  (float)(i* Fs)/(float)(n) ;
        }

      }
    }

    return freqMax ;

}

int main3(){


  // Freq 7Hz
    double data[1][50] = {
      
      {0.0, 0.4817536741017153, 0.8443279255020151, 0.9980267284282716, 0.9048270524660195, 0.5877852522924732, 0.12533323356430454, -0.36812455268467836, -0.7705132427757894, -0.9822872507286887, -0.9510565162951536, -0.684547105928689, -0.24868988716485535, 0.2486898871648549, 0.6845471059286893, 0.9510565162951534, 0.9822872507286886, 0.7705132427757886, 0.368124552684678, -0.12533323356430318, -0.5877852522924728, -0.9048270524660189, -0.9980267284282716, -0.8443279255020152, -0.48175367410171627, -4.898587196589413e-16, 0.4817536741017155, 0.8443279255020155, 0.9980267284282717, 0.90482705246602, 0.5877852522924737, 0.12533323356430415, -0.3681245526846787, -0.7705132427757901, -0.982287250728689, -0.9510565162951538, -0.6845471059286887, -0.2486898871648541, 0.2486898871648527, 0.6845471059286876, 0.9510565162951533, 0.9822872507286887, 0.770513242775791, 0.36812455268468003, -0.12533323356430268, -0.5877852522924724, -0.9048270524660195, -0.9980267284282716, -0.8443279255020163, -0.48175367410171677},
    };

    Mat ts(1,50, CV_64F, data);

    float freq = getDominantFreqs(ts, 3,8, 50);
    trace(freq);

    return 0;
}


// float frequencyFromCrossing(vector<double> &y){
//
//   // 4 Hz
//     double y[200] =
//       {0.0, 0.08785119655074317, 0.17502305897527604, 0.26084150628989694, 0.34464292317451706, 0.42577929156507266, 0.5036232016357608, 0.5775727034222676, 0.6470559615694442, 0.7115356772092853, 0.7705132427757891, 0.8235325976284273, 0.8701837546695257, 0.9101059706849957, 0.9429905358928644, 0.9685831611286311, 0.986685944207868, 0.9971589002606139, 0.9999210442038161, 0.9949510169813002, 0.9822872507286887, 0.9620276715860859, 0.9343289424566121, 0.899405251566371, 0.8575266561936523, 0.8090169943749475, 0.754251380736104, 0.6936533058128049, 0.6276913612907006, 0.5568756164881882, 0.4817536741017156, 0.4029064357136627, 0.3209436098072097, 0.2364989970237246, 0.15022558912075712, 0.06279051952931314, -0.025130095443337126, -0.11285638487348162, -0.19970998051440683, -0.2850192624699762, -0.3681245526846779, -0.4483832160900325, -0.5251746299612954, -0.5979049830575188, -0.6660118674342514, -0.7289686274214116, -0.7862884321366191, -0.8375280400421419, -0.8822912264349534, -0.9202318473658704, -0.9510565162951535, -0.9745268727865771, -0.9904614256966512, -0.9987369566060175, -0.9992894726405892, -0.9921147013144779, -0.9772681235681935, -0.9548645447466428, -0.9250772068344582, -0.8881364488135448, -0.8443279255020155, -0.7939903986478354, -0.737513117358174, -0.6753328081210246, -0.6079302976946057, -0.5358267949789963, -0.4595798606214877, -0.37977909552180106, -0.29704158157703503, -0.21200710992205404, -0.1253332335643038, -0.037690182669935096, 0.05024431817976885, 0.1377902906846381, 0.22427076094938106, 0.3090169943749472, 0.3913736668372021, 0.47070393216533213, 0.5463943467342692, 0.6178596130903344, 0.6845471059286886, 0.745941145424182, 0.8015669848708769, 0.8509944817946921, 0.8938414241512634, 0.9297764858882511, 0.9585217890173758, 0.9798550523842469, 0.9936113105200084, 0.9996841892832999, 0.9980267284282716, 0.9886517447379142, 0.9716317329146738, 0.9470983049947441, 0.9152411726209173, 0.8763066800438635, 0.8305958991958126, 0.7784623015670233, 0.7203090248879069, 0.6565857557529565, 0.5877852522924734, 0.5144395337815069, 0.4371157666509335, 0.3564118787132515, 0.27295193551732616, 0.18738131458572393, 0.10036171485121433, 0.012566039883352193, -0.075326805527933, -0.16263716519488372, -0.24868988716485474, -0.33281954452298645, -0.4143755809932838, -0.49272734154829273, -0.5672689491267575, -0.6374239897486905, -0.7026499697988486, -0.7624425110114472, -0.8163392507171833, -0.8639234171928346, -0.9048270524660189, -0.9387338576538742, -0.9653816388332739, -0.9845643345292053, -0.9961336091431724, -1.0, -0.9961336091431725, -0.9845643345292056, -0.9653816388332741, -0.9387338576538744, -0.9048270524660192, -0.863923417192835, -0.8163392507171838, -0.7624425110114478, -0.7026499697988492, -0.6374239897486897, -0.5672689491267566, -0.4927273415482919, -0.41437558099328303, -0.3328195445229856, -0.24868988716485388, -0.16263716519488458, -0.07532680552793385, 0.012566039883351338, 0.10036171485121348, 0.18738131458572307, 0.2729519355173253, 0.35641187871325064, 0.4371157666509327, 0.5144395337815062, 0.5877852522924728, 0.656585755752956, 0.7203090248879063, 0.7784623015670228, 0.830595899195812, 0.8763066800438638, 0.9152411726209178, 0.9470983049947443, 0.971631732914674, 0.988651744737914, 0.9980267284282716, 0.9996841892832999, 0.9936113105200085, 0.9798550523842466, 0.9585217890173756, 0.9297764858882511, 0.8938414241512634, 0.8509944817946925, 0.8015669848708774, 0.7459411454241831, 0.68454710592869, 0.6178596130903344, 0.5463943467342692, 0.47070393216533285, 0.3913736668372028, 0.309016994374948, 0.22427076094938192, 0.13779029068463894, 0.05024431817977059, -0.03769018266993336, -0.1253332335643047, -0.21200710992205493, -0.29704158157703336, -0.3797790955218011, -0.4595798606214893, -0.5358267949789963, -0.6079302976946064, -0.675332808121024, -0.7375131173581746, -0.7939903986478348, -0.8443279255020155, -0.888136448813544, -0.9250772068344583, -0.9548645447466425, -0.9772681235681935, -0.9921147013144777, -0.9992894726405892, -0.9987369566060176, -0.9904614256966513, -0.9745268727865777};
//
//     int Fs = 50;
//
//     Mat ts(1,200, CV_64F, y);
//
//     int numCrossings = 0, st = -1, end;
//
//     trace(ts.at<double>(0,2));
//     trace(ts.at<float>(0,2));
//
//     for(int i=0; i<ts.total()-1; i++){
//       
//       if(y[i] < 0 && y[i+1] >=0){
//         numCrossings += 1;
//         end = i;
//         if(st == -1)
//           st = i;
//       }
//     }
//
//
//     numCrossings -- ;
//     float approxFreq = (numCrossings * (float)(Fs)) / ((float)(end - st)) ;
//
//     trace(numCrossings) ;
//     trace(st) ;
//     trace(end) ;
//     trace(approxFreq) ;
//     
//   return 0;
//
//
// }
template <typename T>
cv::Mat plotGraph(std::vector<T>& vals, int YRange[2])
{

    auto it = minmax_element(vals.begin(), vals.end());
    float scale = 1./ceil(*it.second - *it.first); 
    float bias = *it.first;
    int rows = YRange[1] - YRange[0] + 1;
    cv::Mat image = Mat::zeros( rows, vals.size(), CV_8UC3 );
    image.setTo(0);
    for (int i = 0; i < (int)vals.size()-1; i++)
    {
        cv::line(image, cv::Point(i, rows - 1 - (vals[i] - bias)*scale*YRange[1]), cv::Point(i+1, rows - 1 - (vals[i+1] - bias)*scale*YRange[1]), Scalar(0, 0, 255), 1);
    }

    return image;
}
int main(){
  
  // std::iota (numbers.begin(), numbers.end(), 0);

  double y[200] =
      {0.0, 0.08785119655074317, 0.17502305897527604, 0.26084150628989694, 0.34464292317451706, 0.42577929156507266, 0.5036232016357608, 0.5775727034222676, 0.6470559615694442, 0.7115356772092853, 0.7705132427757891, 0.8235325976284273, 0.8701837546695257, 0.9101059706849957, 0.9429905358928644, 0.9685831611286311, 0.986685944207868, 0.9971589002606139, 0.9999210442038161, 0.9949510169813002, 0.9822872507286887, 0.9620276715860859, 0.9343289424566121, 0.899405251566371, 0.8575266561936523, 0.8090169943749475, 0.754251380736104, 0.6936533058128049, 0.6276913612907006, 0.5568756164881882, 0.4817536741017156, 0.4029064357136627, 0.3209436098072097, 0.2364989970237246, 0.15022558912075712, 0.06279051952931314, -0.025130095443337126, -0.11285638487348162, -0.19970998051440683, -0.2850192624699762, -0.3681245526846779, -0.4483832160900325, -0.5251746299612954, -0.5979049830575188, -0.6660118674342514, -0.7289686274214116, -0.7862884321366191, -0.8375280400421419, -0.8822912264349534, -0.9202318473658704, -0.9510565162951535, -0.9745268727865771, -0.9904614256966512, -0.9987369566060175, -0.9992894726405892, -0.9921147013144779, -0.9772681235681935, -0.9548645447466428, -0.9250772068344582, -0.8881364488135448, -0.8443279255020155, -0.7939903986478354, -0.737513117358174, -0.6753328081210246, -0.6079302976946057, -0.5358267949789963, -0.4595798606214877, -0.37977909552180106, -0.29704158157703503, -0.21200710992205404, -0.1253332335643038, -0.037690182669935096, 0.05024431817976885, 0.1377902906846381, 0.22427076094938106, 0.3090169943749472, 0.3913736668372021, 0.47070393216533213, 0.5463943467342692, 0.6178596130903344, 0.6845471059286886, 0.745941145424182, 0.8015669848708769, 0.8509944817946921, 0.8938414241512634, 0.9297764858882511, 0.9585217890173758, 0.9798550523842469, 0.9936113105200084, 0.9996841892832999, 0.9980267284282716, 0.9886517447379142, 0.9716317329146738, 0.9470983049947441, 0.9152411726209173, 0.8763066800438635, 0.8305958991958126, 0.7784623015670233, 0.7203090248879069, 0.6565857557529565, 0.5877852522924734, 0.5144395337815069, 0.4371157666509335, 0.3564118787132515, 0.27295193551732616, 0.18738131458572393, 0.10036171485121433, 0.012566039883352193, -0.075326805527933, -0.16263716519488372, -0.24868988716485474, -0.33281954452298645, -0.4143755809932838, -0.49272734154829273, -0.5672689491267575, -0.6374239897486905, -0.7026499697988486, -0.7624425110114472, -0.8163392507171833, -0.8639234171928346, -0.9048270524660189, -0.9387338576538742, -0.9653816388332739, -0.9845643345292053, -0.9961336091431724, -1.0, -0.9961336091431725, -0.9845643345292056, -0.9653816388332741, -0.9387338576538744, -0.9048270524660192, -0.863923417192835, -0.8163392507171838, -0.7624425110114478, -0.7026499697988492, -0.6374239897486897, -0.5672689491267566, -0.4927273415482919, -0.41437558099328303, -0.3328195445229856, -0.24868988716485388, -0.16263716519488458, -0.07532680552793385, 0.012566039883351338, 0.10036171485121348, 0.18738131458572307, 0.2729519355173253, 0.35641187871325064, 0.4371157666509327, 0.5144395337815062, 0.5877852522924728, 0.656585755752956, 0.7203090248879063, 0.7784623015670228, 0.830595899195812, 0.8763066800438638, 0.9152411726209178, 0.9470983049947443, 0.971631732914674, 0.988651744737914, 0.9980267284282716, 0.9996841892832999, 0.9936113105200085, 0.9798550523842466, 0.9585217890173756, 0.9297764858882511, 0.8938414241512634, 0.8509944817946925, 0.8015669848708774, 0.7459411454241831, 0.68454710592869, 0.6178596130903344, 0.5463943467342692, 0.47070393216533285, 0.3913736668372028, 0.309016994374948, 0.22427076094938192, 0.13779029068463894, 0.05024431817977059, -0.03769018266993336, -0.1253332335643047, -0.21200710992205493, -0.29704158157703336, -0.3797790955218011, -0.4595798606214893, -0.5358267949789963, -0.6079302976946064, -0.675332808121024, -0.7375131173581746, -0.7939903986478348, -0.8443279255020155, -0.888136448813544, -0.9250772068344583, -0.9548645447466425, -0.9772681235681935, -0.9921147013144777, -0.9992894726405892, -0.9987369566060176, -0.9904614256966513, -0.9745268727865777};

  vector<double> numbers(y, y + sizeof y / sizeof y[0]);

  int range[2] = {0, 200};
  cv::Mat lineGraph = plotGraph(numbers, range);

  imshow("img" , lineGraph);
  waitKey(0);

}
